// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "MutationObject.h"

#include "graphqlservice/internal/Schema.h"

#include "graphqlservice/introspection/IntrospectionSchema.h"

#include <algorithm>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <unordered_map>

using namespace std::literals;

namespace graphql::test_server {
namespace object {

Mutation::Mutation(std::unique_ptr<const Concept> pimpl) noexcept
	: service::Object{ getTypeNames(), getResolvers() }
	, _pimpl { std::move(pimpl) }
{
}

service::TypeNames Mutation::getTypeNames() const noexcept
{
	return {
		R"gql(Mutation)gql"sv
	};
}

service::ResolverMap Mutation::getResolvers() const noexcept
{
	return {
		{ R"gql(__typename)gql"sv, [this](service::ResolverParams&& params) { return resolve_typename(std::move(params)); } },
		{ R"gql(mutationTelemetry)gql"sv, [this](service::ResolverParams&& params) { return resolveMutationTelemetry(std::move(params)); } }
	};
}

void Mutation::beginSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->beginSelectionSet(params);
}

void Mutation::endSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->endSelectionSet(params);
}

service::AwaitableResolver Mutation::resolveMutationTelemetry(service::ResolverParams&& params) const
{
	auto argSensorId = service::ModifiedArgument<int>::require("sensorId", params.arguments);
	auto argSensorValue = service::ModifiedArgument<double>::require("sensorValue", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	service::SelectionSetParams selectionSetParams { static_cast<const service::SelectionSetParams&>(params) };
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->applyMutationTelemetry(service::FieldParams { std::move(selectionSetParams), std::move(directives) }, std::move(argSensorId), std::move(argSensorValue));
	resolverLock.unlock();

	return service::ModifiedResult<bool>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::AwaitableResolver Mutation::resolve_typename(service::ResolverParams&& params) const
{
	return service::Result<std::string>::convert(std::string{ R"gql(Mutation)gql" }, std::move(params));
}

} // namespace object

void AddMutationDetails(const std::shared_ptr<schema::ObjectType>& typeMutation, const std::shared_ptr<schema::Schema>& schema)
{
	typeMutation->AddFields({
		schema::Field::Make(R"gql(mutationTelemetry)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType(R"gql(Boolean)gql"sv), {
			schema::InputValue::Make(R"gql(sensorId)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Int)gql"sv)), R"gql()gql"sv),
			schema::InputValue::Make(R"gql(sensorValue)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Float)gql"sv)), R"gql()gql"sv)
		})
	});
}

} // namespace graphql::test_server
